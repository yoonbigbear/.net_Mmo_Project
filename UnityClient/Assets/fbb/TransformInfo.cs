// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TransformInfo : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public TransformInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Speed { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public Vec3 CurPos { get { return (new Vec3()).__assign(__p.bb_pos + 4, __p.bb); } }
  public Vec3 EndPos { get { return (new Vec3()).__assign(__p.bb_pos + 16, __p.bb); } }
  public Vec3 Dir { get { return (new Vec3()).__assign(__p.bb_pos + 28, __p.bb); } }

  public static Offset<TransformInfo> CreateTransformInfo(FlatBufferBuilder builder, int Speed, float cur_pos_X, float cur_pos_Y, float cur_pos_Z, float end_pos_X, float end_pos_Y, float end_pos_Z, float dir_X, float dir_Y, float dir_Z) {
    builder.Prep(4, 40);
    builder.Prep(4, 12);
    builder.PutFloat(dir_Z);
    builder.PutFloat(dir_Y);
    builder.PutFloat(dir_X);
    builder.Prep(4, 12);
    builder.PutFloat(end_pos_Z);
    builder.PutFloat(end_pos_Y);
    builder.PutFloat(end_pos_X);
    builder.Prep(4, 12);
    builder.PutFloat(cur_pos_Z);
    builder.PutFloat(cur_pos_Y);
    builder.PutFloat(cur_pos_X);
    builder.PutInt(Speed);
    return new Offset<TransformInfo>(builder.Offset);
  }
  public TransformInfoT UnPack() {
    var _o = new TransformInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TransformInfoT _o) {
    _o.Speed = this.Speed;
    _o.CurPos = this.CurPos.UnPack();
    _o.EndPos = this.EndPos.UnPack();
    _o.Dir = this.Dir.UnPack();
  }
  public static Offset<TransformInfo> Pack(FlatBufferBuilder builder, TransformInfoT _o) {
    if (_o == null) return default(Offset<TransformInfo>);
    var _cur_pos_x = _o.CurPos.X;
    var _cur_pos_y = _o.CurPos.Y;
    var _cur_pos_z = _o.CurPos.Z;
    var _end_pos_x = _o.EndPos.X;
    var _end_pos_y = _o.EndPos.Y;
    var _end_pos_z = _o.EndPos.Z;
    var _dir_x = _o.Dir.X;
    var _dir_y = _o.Dir.Y;
    var _dir_z = _o.Dir.Z;
    return CreateTransformInfo(
      builder,
      _o.Speed,
      _cur_pos_x,
      _cur_pos_y,
      _cur_pos_z,
      _end_pos_x,
      _end_pos_y,
      _end_pos_z,
      _dir_x,
      _dir_y,
      _dir_z);
  }
}

public class TransformInfoT
{
  [Newtonsoft.Json.JsonProperty("speed")]
  public int Speed { get; set; }
  [Newtonsoft.Json.JsonProperty("cur_pos")]
  public Vec3T CurPos { get; set; }
  [Newtonsoft.Json.JsonProperty("end_pos")]
  public Vec3T EndPos { get; set; }
  [Newtonsoft.Json.JsonProperty("dir")]
  public Vec3T Dir { get; set; }

  public TransformInfoT() {
    this.Speed = 0;
    this.CurPos = new Vec3T();
    this.EndPos = new Vec3T();
    this.Dir = new Vec3T();
  }
}

