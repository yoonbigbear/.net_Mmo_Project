// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CreateCharacterResp : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_9_29(); }
  public static CreateCharacterResp GetRootAsCreateCharacterResp(ByteBuffer _bb) { return GetRootAsCreateCharacterResp(_bb, new CreateCharacterResp()); }
  public static CreateCharacterResp GetRootAsCreateCharacterResp(ByteBuffer _bb, CreateCharacterResp obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CreateCharacterResp __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public CharacterInfo? Character { get { int o = __p.__offset(4); return o != 0 ? (CharacterInfo?)(new CharacterInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int Keys(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int KeysLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetKeysBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetKeysBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetKeysArray() { return __p.__vector_as_array<int>(6); }
  public long Values(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ValuesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetValuesBytes() { return __p.__vector_as_span<long>(8, 8); }
#else
  public ArraySegment<byte>? GetValuesBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public long[] GetValuesArray() { return __p.__vector_as_array<long>(8); }
  public ErrorCode ErrorCode { get { int o = __p.__offset(10); return o != 0 ? (ErrorCode)__p.bb.GetShort(o + __p.bb_pos) : ErrorCode.Success; } }

  public static Offset<CreateCharacterResp> CreateCreateCharacterResp(FlatBufferBuilder builder,
      Offset<CharacterInfo> characterOffset = default(Offset<CharacterInfo>),
      VectorOffset keysOffset = default(VectorOffset),
      VectorOffset valuesOffset = default(VectorOffset),
      ErrorCode error_code = ErrorCode.Success) {
    builder.StartTable(4);
    CreateCharacterResp.AddValues(builder, valuesOffset);
    CreateCharacterResp.AddKeys(builder, keysOffset);
    CreateCharacterResp.AddCharacter(builder, characterOffset);
    CreateCharacterResp.AddErrorCode(builder, error_code);
    return CreateCharacterResp.EndCreateCharacterResp(builder);
  }

  public static void StartCreateCharacterResp(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddCharacter(FlatBufferBuilder builder, Offset<CharacterInfo> characterOffset) { builder.AddOffset(0, characterOffset.Value, 0); }
  public static void AddKeys(FlatBufferBuilder builder, VectorOffset keysOffset) { builder.AddOffset(1, keysOffset.Value, 0); }
  public static VectorOffset CreateKeysVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateKeysVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateKeysVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateKeysVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(2, valuesOffset.Value, 0); }
  public static VectorOffset CreateValuesVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddErrorCode(FlatBufferBuilder builder, ErrorCode errorCode) { builder.AddShort(3, (short)errorCode, 0); }
  public static Offset<CreateCharacterResp> EndCreateCharacterResp(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CreateCharacterResp>(o);
  }
  public CreateCharacterRespT UnPack() {
    var _o = new CreateCharacterRespT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CreateCharacterRespT _o) {
    _o.Character = this.Character.HasValue ? this.Character.Value.UnPack() : null;
    _o.Keys = new List<int>();
    for (var _j = 0; _j < this.KeysLength; ++_j) {_o.Keys.Add(this.Keys(_j));}
    _o.Values = new List<long>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j));}
    _o.ErrorCode = this.ErrorCode;
  }
  public static Offset<CreateCharacterResp> Pack(FlatBufferBuilder builder, CreateCharacterRespT _o) {
    if (_o == null) return default(Offset<CreateCharacterResp>);
    var _character = _o.Character == null ? default(Offset<CharacterInfo>) : CharacterInfo.Pack(builder, _o.Character);
    var _keys = default(VectorOffset);
    if (_o.Keys != null) {
      var __keys = _o.Keys.ToArray();
      _keys = CreateKeysVector(builder, __keys);
    }
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      var __values = _o.Values.ToArray();
      _values = CreateValuesVector(builder, __values);
    }
    return CreateCreateCharacterResp(
      builder,
      _character,
      _keys,
      _values,
      _o.ErrorCode);
  }
}

public class CreateCharacterRespT
{
  [Newtonsoft.Json.JsonProperty("character")]
  public CharacterInfoT Character { get; set; }
  [Newtonsoft.Json.JsonProperty("keys")]
  public List<int> Keys { get; set; }
  [Newtonsoft.Json.JsonProperty("values")]
  public List<long> Values { get; set; }
  [Newtonsoft.Json.JsonProperty("error_code")]
  public ErrorCode ErrorCode { get; set; }

  public CreateCharacterRespT() {
    this.Character = null;
    this.Keys = null;
    this.Values = null;
    this.ErrorCode = ErrorCode.Success;
  }
}

