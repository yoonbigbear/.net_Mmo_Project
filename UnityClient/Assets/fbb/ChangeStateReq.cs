// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ChangeStateReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_9_29(); }
  public static ChangeStateReq GetRootAsChangeStateReq(ByteBuffer _bb) { return GetRootAsChangeStateReq(_bb, new ChangeStateReq()); }
  public static ChangeStateReq GetRootAsChangeStateReq(ByteBuffer _bb, ChangeStateReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ChangeStateReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Key(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int KeyLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetKeyBytes() { return __p.__vector_as_span<int>(4, 4); }
#else
  public ArraySegment<byte>? GetKeyBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public int[] GetKeyArray() { return __p.__vector_as_array<int>(4); }
  public long Value(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ValueLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetValueBytes() { return __p.__vector_as_span<long>(6, 8); }
#else
  public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public long[] GetValueArray() { return __p.__vector_as_array<long>(6); }

  public static Offset<ChangeStateReq> CreateChangeStateReq(FlatBufferBuilder builder,
      VectorOffset keyOffset = default(VectorOffset),
      VectorOffset valueOffset = default(VectorOffset)) {
    builder.StartTable(2);
    ChangeStateReq.AddValue(builder, valueOffset);
    ChangeStateReq.AddKey(builder, keyOffset);
    return ChangeStateReq.EndChangeStateReq(builder);
  }

  public static void StartChangeStateReq(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddKey(FlatBufferBuilder builder, VectorOffset keyOffset) { builder.AddOffset(0, keyOffset.Value, 0); }
  public static VectorOffset CreateKeyVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateKeyVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateKeyVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateKeyVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartKeyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddValue(FlatBufferBuilder builder, VectorOffset valueOffset) { builder.AddOffset(1, valueOffset.Value, 0); }
  public static VectorOffset CreateValueVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValueVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValueVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValueVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<ChangeStateReq> EndChangeStateReq(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ChangeStateReq>(o);
  }
  public ChangeStateReqT UnPack() {
    var _o = new ChangeStateReqT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ChangeStateReqT _o) {
    _o.Key = new List<int>();
    for (var _j = 0; _j < this.KeyLength; ++_j) {_o.Key.Add(this.Key(_j));}
    _o.Value = new List<long>();
    for (var _j = 0; _j < this.ValueLength; ++_j) {_o.Value.Add(this.Value(_j));}
  }
  public static Offset<ChangeStateReq> Pack(FlatBufferBuilder builder, ChangeStateReqT _o) {
    if (_o == null) return default(Offset<ChangeStateReq>);
    var _key = default(VectorOffset);
    if (_o.Key != null) {
      var __key = _o.Key.ToArray();
      _key = CreateKeyVector(builder, __key);
    }
    var _value = default(VectorOffset);
    if (_o.Value != null) {
      var __value = _o.Value.ToArray();
      _value = CreateValueVector(builder, __value);
    }
    return CreateChangeStateReq(
      builder,
      _key,
      _value);
  }
}

public class ChangeStateReqT
{
  [Newtonsoft.Json.JsonProperty("key")]
  public List<int> Key { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public List<long> Value { get; set; }

  public ChangeStateReqT() {
    this.Key = null;
    this.Value = null;
  }
}

