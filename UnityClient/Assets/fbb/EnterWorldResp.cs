// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EnterWorldResp : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_9_29(); }
  public static EnterWorldResp GetRootAsEnterWorldResp(ByteBuffer _bb) { return GetRootAsEnterWorldResp(_bb, new EnterWorldResp()); }
  public static EnterWorldResp GetRootAsEnterWorldResp(ByteBuffer _bb, EnterWorldResp obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EnterWorldResp __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint ObjId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public TransformInfo? Transform { get { int o = __p.__offset(6); return o != 0 ? (TransformInfo?)(new TransformInfo()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public uint OtherObjIds(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int OtherObjIdsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetOtherObjIdsBytes() { return __p.__vector_as_span<uint>(8, 4); }
#else
  public ArraySegment<byte>? GetOtherObjIdsBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public uint[] GetOtherObjIdsArray() { return __p.__vector_as_array<uint>(8); }
  public TransformInfo? OtherTransforms(int j) { int o = __p.__offset(10); return o != 0 ? (TransformInfo?)(new TransformInfo()).__assign(__p.__vector(o) + j * 40, __p.bb) : null; }
  public int OtherTransformsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public StateSync? OtherStats(int j) { int o = __p.__offset(12); return o != 0 ? (StateSync?)(new StateSync()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OtherStatsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ObjectType ObjectTypes(int j) { int o = __p.__offset(14); return o != 0 ? (ObjectType)__p.bb.Get(__p.__vector(o) + j * 1) : (ObjectType)0; }
  public int ObjectTypesLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ObjectType> GetObjectTypesBytes() { return __p.__vector_as_span<ObjectType>(14, 1); }
#else
  public ArraySegment<byte>? GetObjectTypesBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public ObjectType[] GetObjectTypesArray() { int o = __p.__offset(14); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); ObjectType[] a = new ObjectType[l]; for (int i = 0; i < l; i++) { a[i] = (ObjectType)__p.bb.Get(p + i * 1); } return a; }
  public int ObjectTids(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ObjectTidsLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetObjectTidsBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetObjectTidsBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetObjectTidsArray() { return __p.__vector_as_array<int>(16); }
  public ErrorCode ErrorCode { get { int o = __p.__offset(18); return o != 0 ? (ErrorCode)__p.bb.GetShort(o + __p.bb_pos) : ErrorCode.Success; } }

  public static Offset<EnterWorldResp> CreateEnterWorldResp(FlatBufferBuilder builder,
      uint obj_id = 0,
      TransformInfoT transform = null,
      VectorOffset other_obj_idsOffset = default(VectorOffset),
      VectorOffset other_transformsOffset = default(VectorOffset),
      VectorOffset other_statsOffset = default(VectorOffset),
      VectorOffset object_typesOffset = default(VectorOffset),
      VectorOffset object_tidsOffset = default(VectorOffset),
      ErrorCode error_code = ErrorCode.Success) {
    builder.StartTable(8);
    EnterWorldResp.AddObjectTids(builder, object_tidsOffset);
    EnterWorldResp.AddObjectTypes(builder, object_typesOffset);
    EnterWorldResp.AddOtherStats(builder, other_statsOffset);
    EnterWorldResp.AddOtherTransforms(builder, other_transformsOffset);
    EnterWorldResp.AddOtherObjIds(builder, other_obj_idsOffset);
    EnterWorldResp.AddTransform(builder, TransformInfo.Pack(builder, transform));
    EnterWorldResp.AddObjId(builder, obj_id);
    EnterWorldResp.AddErrorCode(builder, error_code);
    return EnterWorldResp.EndEnterWorldResp(builder);
  }

  public static void StartEnterWorldResp(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddObjId(FlatBufferBuilder builder, uint objId) { builder.AddUint(0, objId, 0); }
  public static void AddTransform(FlatBufferBuilder builder, Offset<TransformInfo> transformOffset) { builder.AddStruct(1, transformOffset.Value, 0); }
  public static void AddOtherObjIds(FlatBufferBuilder builder, VectorOffset otherObjIdsOffset) { builder.AddOffset(2, otherObjIdsOffset.Value, 0); }
  public static VectorOffset CreateOtherObjIdsVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOtherObjIdsVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOtherObjIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<uint> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOtherObjIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<uint>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOtherObjIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOtherTransforms(FlatBufferBuilder builder, VectorOffset otherTransformsOffset) { builder.AddOffset(3, otherTransformsOffset.Value, 0); }
  public static void StartOtherTransformsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(40, numElems, 4); }
  public static void AddOtherStats(FlatBufferBuilder builder, VectorOffset otherStatsOffset) { builder.AddOffset(4, otherStatsOffset.Value, 0); }
  public static VectorOffset CreateOtherStatsVector(FlatBufferBuilder builder, Offset<StateSync>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOtherStatsVectorBlock(FlatBufferBuilder builder, Offset<StateSync>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOtherStatsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<StateSync>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOtherStatsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<StateSync>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOtherStatsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddObjectTypes(FlatBufferBuilder builder, VectorOffset objectTypesOffset) { builder.AddOffset(5, objectTypesOffset.Value, 0); }
  public static VectorOffset CreateObjectTypesVector(FlatBufferBuilder builder, ObjectType[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte((byte)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateObjectTypesVectorBlock(FlatBufferBuilder builder, ObjectType[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObjectTypesVectorBlock(FlatBufferBuilder builder, ArraySegment<ObjectType> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObjectTypesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<ObjectType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartObjectTypesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddObjectTids(FlatBufferBuilder builder, VectorOffset objectTidsOffset) { builder.AddOffset(6, objectTidsOffset.Value, 0); }
  public static VectorOffset CreateObjectTidsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateObjectTidsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObjectTidsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObjectTidsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartObjectTidsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddErrorCode(FlatBufferBuilder builder, ErrorCode errorCode) { builder.AddShort(7, (short)errorCode, 0); }
  public static Offset<EnterWorldResp> EndEnterWorldResp(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<EnterWorldResp>(o);
  }
  public EnterWorldRespT UnPack() {
    var _o = new EnterWorldRespT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EnterWorldRespT _o) {
    _o.ObjId = this.ObjId;
    _o.Transform = this.Transform.HasValue ? this.Transform.Value.UnPack() : null;
    _o.OtherObjIds = new List<uint>();
    for (var _j = 0; _j < this.OtherObjIdsLength; ++_j) {_o.OtherObjIds.Add(this.OtherObjIds(_j));}
    _o.OtherTransforms = new List<TransformInfoT>();
    for (var _j = 0; _j < this.OtherTransformsLength; ++_j) {_o.OtherTransforms.Add(this.OtherTransforms(_j).HasValue ? this.OtherTransforms(_j).Value.UnPack() : null);}
    _o.OtherStats = new List<StateSyncT>();
    for (var _j = 0; _j < this.OtherStatsLength; ++_j) {_o.OtherStats.Add(this.OtherStats(_j).HasValue ? this.OtherStats(_j).Value.UnPack() : null);}
    _o.ObjectTypes = new List<ObjectType>();
    for (var _j = 0; _j < this.ObjectTypesLength; ++_j) {_o.ObjectTypes.Add(this.ObjectTypes(_j));}
    _o.ObjectTids = new List<int>();
    for (var _j = 0; _j < this.ObjectTidsLength; ++_j) {_o.ObjectTids.Add(this.ObjectTids(_j));}
    _o.ErrorCode = this.ErrorCode;
  }
  public static Offset<EnterWorldResp> Pack(FlatBufferBuilder builder, EnterWorldRespT _o) {
    if (_o == null) return default(Offset<EnterWorldResp>);
    var _other_obj_ids = default(VectorOffset);
    if (_o.OtherObjIds != null) {
      var __other_obj_ids = _o.OtherObjIds.ToArray();
      _other_obj_ids = CreateOtherObjIdsVector(builder, __other_obj_ids);
    }
    var _other_transforms = default(VectorOffset);
    if (_o.OtherTransforms != null) {
      StartOtherTransformsVector(builder, _o.OtherTransforms.Count);
      for (var _j = _o.OtherTransforms.Count - 1; _j >= 0; --_j) { TransformInfo.Pack(builder, _o.OtherTransforms[_j]); }
      _other_transforms = builder.EndVector();
    }
    var _other_stats = default(VectorOffset);
    if (_o.OtherStats != null) {
      var __other_stats = new Offset<StateSync>[_o.OtherStats.Count];
      for (var _j = 0; _j < __other_stats.Length; ++_j) { __other_stats[_j] = StateSync.Pack(builder, _o.OtherStats[_j]); }
      _other_stats = CreateOtherStatsVector(builder, __other_stats);
    }
    var _object_types = default(VectorOffset);
    if (_o.ObjectTypes != null) {
      var __object_types = _o.ObjectTypes.ToArray();
      _object_types = CreateObjectTypesVector(builder, __object_types);
    }
    var _object_tids = default(VectorOffset);
    if (_o.ObjectTids != null) {
      var __object_tids = _o.ObjectTids.ToArray();
      _object_tids = CreateObjectTidsVector(builder, __object_tids);
    }
    return CreateEnterWorldResp(
      builder,
      _o.ObjId,
      _o.Transform,
      _other_obj_ids,
      _other_transforms,
      _other_stats,
      _object_types,
      _object_tids,
      _o.ErrorCode);
  }
}

public class EnterWorldRespT
{
  [Newtonsoft.Json.JsonProperty("obj_id")]
  public uint ObjId { get; set; }
  [Newtonsoft.Json.JsonProperty("transform")]
  public TransformInfoT Transform { get; set; }
  [Newtonsoft.Json.JsonProperty("other_obj_ids")]
  public List<uint> OtherObjIds { get; set; }
  [Newtonsoft.Json.JsonProperty("other_transforms")]
  public List<TransformInfoT> OtherTransforms { get; set; }
  [Newtonsoft.Json.JsonProperty("other_stats")]
  public List<StateSyncT> OtherStats { get; set; }
  [Newtonsoft.Json.JsonProperty("object_types")]
  public List<ObjectType> ObjectTypes { get; set; }
  [Newtonsoft.Json.JsonProperty("object_tids")]
  public List<int> ObjectTids { get; set; }
  [Newtonsoft.Json.JsonProperty("error_code")]
  public ErrorCode ErrorCode { get; set; }

  public EnterWorldRespT() {
    this.ObjId = 0;
    this.Transform = new TransformInfoT();
    this.OtherObjIds = null;
    this.OtherTransforms = null;
    this.OtherStats = null;
    this.ObjectTypes = null;
    this.ObjectTids = null;
    this.ErrorCode = ErrorCode.Success;
  }
}

