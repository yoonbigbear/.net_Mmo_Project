// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct HitSync : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_9_29(); }
  public static HitSync GetRootAsHitSync(ByteBuffer _bb) { return GetRootAsHitSync(_bb, new HitSync()); }
  public static HitSync GetRootAsHitSync(ByteBuffer _bb, HitSync obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HitSync __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int SkillTid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public uint TargetObjIds(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int TargetObjIdsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetTargetObjIdsBytes() { return __p.__vector_as_span<uint>(6, 4); }
#else
  public ArraySegment<byte>? GetTargetObjIdsBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public uint[] GetTargetObjIdsArray() { return __p.__vector_as_array<uint>(6); }
  public long Damages(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int DamagesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetDamagesBytes() { return __p.__vector_as_span<long>(8, 8); }
#else
  public ArraySegment<byte>? GetDamagesBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public long[] GetDamagesArray() { return __p.__vector_as_array<long>(8); }
  public Vec3? Positions(int j) { int o = __p.__offset(10); return o != 0 ? (Vec3?)(new Vec3()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int PositionsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<HitSync> CreateHitSync(FlatBufferBuilder builder,
      int skill_tid = 0,
      VectorOffset target_obj_idsOffset = default(VectorOffset),
      VectorOffset damagesOffset = default(VectorOffset),
      VectorOffset positionsOffset = default(VectorOffset)) {
    builder.StartTable(4);
    HitSync.AddPositions(builder, positionsOffset);
    HitSync.AddDamages(builder, damagesOffset);
    HitSync.AddTargetObjIds(builder, target_obj_idsOffset);
    HitSync.AddSkillTid(builder, skill_tid);
    return HitSync.EndHitSync(builder);
  }

  public static void StartHitSync(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddSkillTid(FlatBufferBuilder builder, int skillTid) { builder.AddInt(0, skillTid, 0); }
  public static void AddTargetObjIds(FlatBufferBuilder builder, VectorOffset targetObjIdsOffset) { builder.AddOffset(1, targetObjIdsOffset.Value, 0); }
  public static VectorOffset CreateTargetObjIdsVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTargetObjIdsVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTargetObjIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<uint> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTargetObjIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<uint>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTargetObjIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDamages(FlatBufferBuilder builder, VectorOffset damagesOffset) { builder.AddOffset(2, damagesOffset.Value, 0); }
  public static VectorOffset CreateDamagesVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDamagesVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDamagesVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDamagesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDamagesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddPositions(FlatBufferBuilder builder, VectorOffset positionsOffset) { builder.AddOffset(3, positionsOffset.Value, 0); }
  public static void StartPositionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<HitSync> EndHitSync(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HitSync>(o);
  }
  public HitSyncT UnPack() {
    var _o = new HitSyncT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HitSyncT _o) {
    _o.SkillTid = this.SkillTid;
    _o.TargetObjIds = new List<uint>();
    for (var _j = 0; _j < this.TargetObjIdsLength; ++_j) {_o.TargetObjIds.Add(this.TargetObjIds(_j));}
    _o.Damages = new List<long>();
    for (var _j = 0; _j < this.DamagesLength; ++_j) {_o.Damages.Add(this.Damages(_j));}
    _o.Positions = new List<Vec3T>();
    for (var _j = 0; _j < this.PositionsLength; ++_j) {_o.Positions.Add(this.Positions(_j).HasValue ? this.Positions(_j).Value.UnPack() : null);}
  }
  public static Offset<HitSync> Pack(FlatBufferBuilder builder, HitSyncT _o) {
    if (_o == null) return default(Offset<HitSync>);
    var _target_obj_ids = default(VectorOffset);
    if (_o.TargetObjIds != null) {
      var __target_obj_ids = _o.TargetObjIds.ToArray();
      _target_obj_ids = CreateTargetObjIdsVector(builder, __target_obj_ids);
    }
    var _damages = default(VectorOffset);
    if (_o.Damages != null) {
      var __damages = _o.Damages.ToArray();
      _damages = CreateDamagesVector(builder, __damages);
    }
    var _positions = default(VectorOffset);
    if (_o.Positions != null) {
      StartPositionsVector(builder, _o.Positions.Count);
      for (var _j = _o.Positions.Count - 1; _j >= 0; --_j) { Vec3.Pack(builder, _o.Positions[_j]); }
      _positions = builder.EndVector();
    }
    return CreateHitSync(
      builder,
      _o.SkillTid,
      _target_obj_ids,
      _damages,
      _positions);
  }
}

public class HitSyncT
{
  [Newtonsoft.Json.JsonProperty("skill_tid")]
  public int SkillTid { get; set; }
  [Newtonsoft.Json.JsonProperty("target_obj_ids")]
  public List<uint> TargetObjIds { get; set; }
  [Newtonsoft.Json.JsonProperty("damages")]
  public List<long> Damages { get; set; }
  [Newtonsoft.Json.JsonProperty("positions")]
  public List<Vec3T> Positions { get; set; }

  public HitSyncT() {
    this.SkillTid = 0;
    this.TargetObjIds = null;
    this.Damages = null;
    this.Positions = null;
  }
}

