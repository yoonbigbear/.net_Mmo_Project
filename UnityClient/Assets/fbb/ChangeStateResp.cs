// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ChangeStateResp : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_9_29(); }
  public static ChangeStateResp GetRootAsChangeStateResp(ByteBuffer _bb) { return GetRootAsChangeStateResp(_bb, new ChangeStateResp()); }
  public static ChangeStateResp GetRootAsChangeStateResp(ByteBuffer _bb, ChangeStateResp obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ChangeStateResp __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ErrorCode ErrorCode { get { int o = __p.__offset(4); return o != 0 ? (ErrorCode)__p.bb.GetShort(o + __p.bb_pos) : ErrorCode.Success; } }

  public static Offset<ChangeStateResp> CreateChangeStateResp(FlatBufferBuilder builder,
      ErrorCode error_code = ErrorCode.Success) {
    builder.StartTable(1);
    ChangeStateResp.AddErrorCode(builder, error_code);
    return ChangeStateResp.EndChangeStateResp(builder);
  }

  public static void StartChangeStateResp(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddErrorCode(FlatBufferBuilder builder, ErrorCode errorCode) { builder.AddShort(0, (short)errorCode, 0); }
  public static Offset<ChangeStateResp> EndChangeStateResp(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ChangeStateResp>(o);
  }
  public ChangeStateRespT UnPack() {
    var _o = new ChangeStateRespT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ChangeStateRespT _o) {
    _o.ErrorCode = this.ErrorCode;
  }
  public static Offset<ChangeStateResp> Pack(FlatBufferBuilder builder, ChangeStateRespT _o) {
    if (_o == null) return default(Offset<ChangeStateResp>);
    return CreateChangeStateResp(
      builder,
      _o.ErrorCode);
  }
}

public class ChangeStateRespT
{
  [Newtonsoft.Json.JsonProperty("error_code")]
  public ErrorCode ErrorCode { get; set; }

  public ChangeStateRespT() {
    this.ErrorCode = ErrorCode.Success;
  }
}

