// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TradeInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_9_29(); }
  public static TradeInfo GetRootAsTradeInfo(ByteBuffer _bb) { return GetRootAsTradeInfo(_bb, new TradeInfo()); }
  public static TradeInfo GetRootAsTradeInfo(ByteBuffer _bb, TradeInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TradeInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint ObjId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ItemInfo? Items(int j) { int o = __p.__offset(6); return o != 0 ? (ItemInfo?)(new ItemInfo()).__assign(__p.__vector(o) + j * 16, __p.bb) : null; }
  public int ItemsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Currency? Money { get { int o = __p.__offset(8); return o != 0 ? (Currency?)(new Currency()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public bool Lock { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<TradeInfo> CreateTradeInfo(FlatBufferBuilder builder,
      uint obj_id = 0,
      VectorOffset itemsOffset = default(VectorOffset),
      CurrencyT money = null,
      bool @lock = false) {
    builder.StartTable(4);
    TradeInfo.AddMoney(builder, Currency.Pack(builder, money));
    TradeInfo.AddItems(builder, itemsOffset);
    TradeInfo.AddObjId(builder, obj_id);
    TradeInfo.AddLock(builder, @lock);
    return TradeInfo.EndTradeInfo(builder);
  }

  public static void StartTradeInfo(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddObjId(FlatBufferBuilder builder, uint objId) { builder.AddUint(0, objId, 0); }
  public static void AddItems(FlatBufferBuilder builder, VectorOffset itemsOffset) { builder.AddOffset(1, itemsOffset.Value, 0); }
  public static void StartItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(16, numElems, 8); }
  public static void AddMoney(FlatBufferBuilder builder, Offset<Currency> moneyOffset) { builder.AddStruct(2, moneyOffset.Value, 0); }
  public static void AddLock(FlatBufferBuilder builder, bool @lock) { builder.AddBool(3, @lock, false); }
  public static Offset<TradeInfo> EndTradeInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TradeInfo>(o);
  }
  public TradeInfoT UnPack() {
    var _o = new TradeInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TradeInfoT _o) {
    _o.ObjId = this.ObjId;
    _o.Items = new List<ItemInfoT>();
    for (var _j = 0; _j < this.ItemsLength; ++_j) {_o.Items.Add(this.Items(_j).HasValue ? this.Items(_j).Value.UnPack() : null);}
    _o.Money = this.Money.HasValue ? this.Money.Value.UnPack() : null;
    _o.Lock = this.Lock;
  }
  public static Offset<TradeInfo> Pack(FlatBufferBuilder builder, TradeInfoT _o) {
    if (_o == null) return default(Offset<TradeInfo>);
    var _items = default(VectorOffset);
    if (_o.Items != null) {
      StartItemsVector(builder, _o.Items.Count);
      for (var _j = _o.Items.Count - 1; _j >= 0; --_j) { ItemInfo.Pack(builder, _o.Items[_j]); }
      _items = builder.EndVector();
    }
    return CreateTradeInfo(
      builder,
      _o.ObjId,
      _items,
      _o.Money,
      _o.Lock);
  }
}

public class TradeInfoT
{
  [Newtonsoft.Json.JsonProperty("obj_id")]
  public uint ObjId { get; set; }
  [Newtonsoft.Json.JsonProperty("items")]
  public List<ItemInfoT> Items { get; set; }
  [Newtonsoft.Json.JsonProperty("money")]
  public CurrencyT Money { get; set; }
  [Newtonsoft.Json.JsonProperty("lock")]
  public bool Lock { get; set; }

  public TradeInfoT() {
    this.ObjId = 0;
    this.Items = null;
    this.Money = new CurrencyT();
    this.Lock = false;
  }
}

