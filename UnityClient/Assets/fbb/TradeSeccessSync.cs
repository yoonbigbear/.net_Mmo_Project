// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TradeSeccessSync : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_9_29(); }
  public static TradeSeccessSync GetRootAsTradeSeccessSync(ByteBuffer _bb) { return GetRootAsTradeSeccessSync(_bb, new TradeSeccessSync()); }
  public static TradeSeccessSync GetRootAsTradeSeccessSync(ByteBuffer _bb, TradeSeccessSync obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TradeSeccessSync __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TradeInfo? Traders(int j) { int o = __p.__offset(4); return o != 0 ? (TradeInfo?)(new TradeInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TradersLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<TradeSeccessSync> CreateTradeSeccessSync(FlatBufferBuilder builder,
      VectorOffset tradersOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TradeSeccessSync.AddTraders(builder, tradersOffset);
    return TradeSeccessSync.EndTradeSeccessSync(builder);
  }

  public static void StartTradeSeccessSync(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTraders(FlatBufferBuilder builder, VectorOffset tradersOffset) { builder.AddOffset(0, tradersOffset.Value, 0); }
  public static VectorOffset CreateTradersVector(FlatBufferBuilder builder, Offset<TradeInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTradersVectorBlock(FlatBufferBuilder builder, Offset<TradeInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTradersVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<TradeInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTradersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<TradeInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTradersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<TradeSeccessSync> EndTradeSeccessSync(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TradeSeccessSync>(o);
  }
  public TradeSeccessSyncT UnPack() {
    var _o = new TradeSeccessSyncT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TradeSeccessSyncT _o) {
    _o.Traders = new List<TradeInfoT>();
    for (var _j = 0; _j < this.TradersLength; ++_j) {_o.Traders.Add(this.Traders(_j).HasValue ? this.Traders(_j).Value.UnPack() : null);}
  }
  public static Offset<TradeSeccessSync> Pack(FlatBufferBuilder builder, TradeSeccessSyncT _o) {
    if (_o == null) return default(Offset<TradeSeccessSync>);
    var _traders = default(VectorOffset);
    if (_o.Traders != null) {
      var __traders = new Offset<TradeInfo>[_o.Traders.Count];
      for (var _j = 0; _j < __traders.Length; ++_j) { __traders[_j] = TradeInfo.Pack(builder, _o.Traders[_j]); }
      _traders = CreateTradersVector(builder, __traders);
    }
    return CreateTradeSeccessSync(
      builder,
      _traders);
  }
}

public class TradeSeccessSyncT
{
  [Newtonsoft.Json.JsonProperty("traders")]
  public List<TradeInfoT> Traders { get; set; }

  public TradeSeccessSyncT() {
    this.Traders = null;
  }
}

