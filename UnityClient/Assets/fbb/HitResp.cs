// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct HitResp : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_9_29(); }
  public static HitResp GetRootAsHitResp(ByteBuffer _bb) { return GetRootAsHitResp(_bb, new HitResp()); }
  public static HitResp GetRootAsHitResp(ByteBuffer _bb, HitResp obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HitResp __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ItemInfo? Items(int j) { int o = __p.__offset(4); return o != 0 ? (ItemInfo?)(new ItemInfo()).__assign(__p.__vector(o) + j * 16, __p.bb) : null; }
  public int ItemsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ErrorCode ErrorCode { get { int o = __p.__offset(6); return o != 0 ? (ErrorCode)__p.bb.GetShort(o + __p.bb_pos) : ErrorCode.Success; } }

  public static Offset<HitResp> CreateHitResp(FlatBufferBuilder builder,
      VectorOffset itemsOffset = default(VectorOffset),
      ErrorCode error_code = ErrorCode.Success) {
    builder.StartTable(2);
    HitResp.AddItems(builder, itemsOffset);
    HitResp.AddErrorCode(builder, error_code);
    return HitResp.EndHitResp(builder);
  }

  public static void StartHitResp(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddItems(FlatBufferBuilder builder, VectorOffset itemsOffset) { builder.AddOffset(0, itemsOffset.Value, 0); }
  public static void StartItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(16, numElems, 8); }
  public static void AddErrorCode(FlatBufferBuilder builder, ErrorCode errorCode) { builder.AddShort(1, (short)errorCode, 0); }
  public static Offset<HitResp> EndHitResp(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HitResp>(o);
  }
  public HitRespT UnPack() {
    var _o = new HitRespT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HitRespT _o) {
    _o.Items = new List<ItemInfoT>();
    for (var _j = 0; _j < this.ItemsLength; ++_j) {_o.Items.Add(this.Items(_j).HasValue ? this.Items(_j).Value.UnPack() : null);}
    _o.ErrorCode = this.ErrorCode;
  }
  public static Offset<HitResp> Pack(FlatBufferBuilder builder, HitRespT _o) {
    if (_o == null) return default(Offset<HitResp>);
    var _items = default(VectorOffset);
    if (_o.Items != null) {
      StartItemsVector(builder, _o.Items.Count);
      for (var _j = _o.Items.Count - 1; _j >= 0; --_j) { ItemInfo.Pack(builder, _o.Items[_j]); }
      _items = builder.EndVector();
    }
    return CreateHitResp(
      builder,
      _items,
      _o.ErrorCode);
  }
}

public class HitRespT
{
  [Newtonsoft.Json.JsonProperty("items")]
  public List<ItemInfoT> Items { get; set; }
  [Newtonsoft.Json.JsonProperty("error_code")]
  public ErrorCode ErrorCode { get; set; }

  public HitRespT() {
    this.Items = null;
    this.ErrorCode = ErrorCode.Success;
  }
}

